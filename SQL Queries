SECOND FILE (Following this notebook https://github.com/BuzzFeedNews/2018-03-oscars-script-diversity-analysis/blob/master/notebooks/calculate_word_frequencies.ipynb)

#2

 - - get rid of unknown column because I kept row names when importing
ALTER TABLE `character_word_counts`
DROP MyUnknownColumn


-- Left Join, with a CTE thrown in there just because I have been practicing with them
WITH counts
AS
(
SELECT *
FROM `character_word_counts`
)
SELECT c.year, c.film, c.character, c.actor, c.word, c.count, a.gender, a.race_simple
FROM `counts` as c
LEFT JOIN `actor_metrics` AS a 
	ON c.actor = a.actor


-- Creating a table to work from
CREATE TABLE actor_word AS
SELECT c.year, c.film, c.character, c.actor, c.word, c.count, a.gender, a.race_simple
FROM `character_word_counts` as c
LEFT JOIN `actor_metrics` AS a 
	ON c.actor = a.actor


SELECT *
FROM `actor_word`
LIMIT 30


-- Preview the total counts of non-stopwords
SELECT year, film, gender, SUM(count)
FROM `actor_word`
GROUP BY film, gender


-- count # of words per gender
SELECT film, word, gender, SUM(count) as total_count
FROM `actor_word`
GROUP BY film, word
ORDER BY film, gender, SUM(COUNT) desc

-- count # of words per gender
SELECT film, word, race_simple, SUM(count) as total_count
FROM `actor_word`
GROUP BY film, word
ORDER BY film, race_simple, SUM(COUNT) desc


-- count # of words per gender per film
WITH words AS
(SELECT film, word, gender, SUM(count) as total_count
FROM `actor_word`
GROUP BY film, word
ORDER BY film, gender, total_count desc)
SELECT * 
FROM `words`
WHERE total_count > 5



-- count # of words per race per film
WITH words AS
(SELECT film, word, race_simple, SUM(count) as total_count
FROM `actor_word`
GROUP BY film, word
ORDER BY film, race_simple, total_count desc)
SELECT * 
FROM `words`
WHERE total_count > 5





Get a look at the data:

SELECT year, film, actor, words, sentences
FROM `actor_metrics`
LIMIT 10

Get rid of extra column that imported:

ALTER TABLE `actor_metrics`
DROP MyUnknownColumn


Task 1: Match a function that groups by a specific column (ex gender) and for that column- 
sums the number of sentences spoken, words spoken, and counts the number of actors:

SELECT gender, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY gender
# This accomplishes the first task of summarizing the data and grouping it


SELECT race, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY race

SELECT race_simple, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY race_simple



Task 2: Calculates these, but per year

SELECT year, gender, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY gender, year


SELECT year, race, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY race, year


SELECT year, race_simple, SUM(sentences) as sum_sent, SUM(words) as sum_words, COUNT(actor) as cnt_act
FROM `actor_metrics`
GROUP BY race_simple, year


TASK #3: For the single grouping (all years) find the % :

SELECT 
	gender, 
    SUM(sentences) as sum_sent, 
    SUM(words) as sum_words, 
    COUNT(actor) as cnt_act,
    SUM(sentences) * 100 / 
		(SELECT SUM(sentences) from `actor_metrics`) as percent_sent,
	SUM(words) * 100 / 
		(SELECT SUM(words) from `actor_metrics`) as percent_words,
	COUNT(actor) * 100 /
		(SELECT COUNT(actor) from `actor_metrics`) as percent_actor
FROM `actor_metrics`
GROUP BY gender



SELECT 
	race,
    SUM(sentences) as sum_sent, 
    SUM(words) as sum_words, 
    COUNT(actor) as cnt_act,
    SUM(sentences) * 100 / 
		(SELECT SUM(sentences) from `actor_metrics`) as percent_sent,
	SUM(words) * 100 / 
		(SELECT SUM(words) from `actor_metrics`) as percent_words,
	COUNT(actor) * 100 /
		(SELECT COUNT(actor) from `actor_metrics`) as percent_actor
FROM `actor_metrics`
GROUP BY race



SELECT 
	race_simple,
    SUM(sentences) as sum_sent, 
    SUM(words) as sum_words, 
    COUNT(actor) as cnt_act,
    SUM(sentences) * 100 / 
		(SELECT SUM(sentences) from `actor_metrics`) as percent_sent,
	SUM(words) * 100 / 
		(SELECT SUM(words) from `actor_metrics`) as percent_words,
	COUNT(actor) * 100 /
		(SELECT COUNT(actor) from `actor_metrics`) as percent_actor
FROM `actor_metrics`
GROUP BY race_simple




TASK 4: Percentages by year

Pulling all of this into SQL queries had me writing all kinds of CTE’s, creating temporary tables, writing subqueries… 
ultimately what I needed was a pivot so I could GROUP BY row and column and that did not appear to be working very well
so after several hours I pulled the data into excel and did it in 15 minutes. I had wanted to do it all in SQL, but, 
sometimes it is what it is and problem solving is the answer.



TASK 5: Casting by category and film

SELECT 
film, year, gender,
   	SUM(sentences) as sentences, 
   	SUM(words) as words, 
   	COUNT(actor) as actor
FROM `actor_metrics`
GROUP BY film, gender

SELECT 
	film, year, race_simple,
    SUM(sentences) as sentences, 
    SUM(words) as words, 
    COUNT(actor) as actor
FROM `actor_metrics`
GROUP BY film, race_simple



